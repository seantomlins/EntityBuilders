using System.Text;
using EntityBuilders.Config;
using EntityBuilders.Models;

namespace EntityBuilders.Templates;

internal static class EntityBuilderTemplate
{
    public static string GenerateSource(Entity entity, EntityBuilderConfig config)
    {
        var propertyMethods = new StringBuilder();
        foreach (var simpleProperty in entity.Properties)
        {
            propertyMethods.Append(SimplePropertyTemplate(entity, simpleProperty));
        }

        foreach (var navigationAndForeignKeyProperty in entity.SelfToOneProperties)
        {
            propertyMethods.Append(SelfToOnePropertyTemplate(entity, navigationAndForeignKeyProperty));
        }

        var initializeCollections = new StringBuilder();
        foreach (var selfToManyProperty in entity.SelfToManyProperties)
        {
            propertyMethods.Append(SelfToManyPropertyTemplate(entity, selfToManyProperty));
            
            initializeCollections.Append(SelfToManyPropertyInitializeCollectionTemplate(selfToManyProperty));
        }

        return $@"// <auto-generated />
using {entity.Namespace};

namespace {config.RootNamespace}
{{
    public partial class {entity.Name}Builder
    {{
        private readonly IIdProvider _idProvider;
        private readonly {entity.Name} _entity;

        public {entity.Name} Entity 
        {{ 
            get {{ return _entity; }} 
        }}

        public {entity.Name}Builder(IIdProvider idProvider)
        {{
            _idProvider = idProvider;
            _entity = new {entity.Name}();
            this.{entity.IdPropertyName}(idProvider.NewId());
            {initializeCollections}
        }}

        public {entity.Name} Build() 
        {{ 
            return _entity;
        }}

        #region Property Methods
        {propertyMethods}
        #endregion
    }}
}}
";
    }

    private static string SimplePropertyTemplate(Entity entity, Property property)
    {
        return $@"
        public {entity.Name}Builder {property.Name}({property.PropertyType} value){{
            _entity.{property.Name} = value;
            return this;
        }}
";
    }

    private static string SelfToOnePropertyTemplate(Entity entity, SelfToOneProperty property)
    {
        var foreignKey = property.ForeignKeyProperty == null
            ? Environment.NewLine
            : @$"_entity.{property.ForeignKeyProperty.Name} = value?.{property.ForeignKeyProperty.Name} ?? 0;";

        return $@"
        public {entity.Name}Builder {property.NavigationProperty.Name}({property.NavigationProperty.PropertyType} value){{
            _entity.{property.NavigationProperty.Name} = value;
            {foreignKey}
            return this;
        }}
";
    }

    private static string SelfToManyPropertyTemplate(Entity entity, SelfToManyProperty property)
    {
        return $@"
        public {entity.Name}Builder Add{property.CollectionEntityClass.ClassName}({property.CollectionEntityClass.ClassName} entity){{
            if (entity == null) return this;

            entity.{entity.Name} = _entity;
            entity.{entity.Name}Id = _entity.{entity.IdPropertyName};
            
            _entity.{property.CollectionProperty.Name}.Add(entity);
            return this;
        }}

        public {entity.Name}Builder Add{property.CollectionEntityClass.ClassName}(Action<{property.CollectionEntityClass.ClassName}Builder> action){{
            var builder = new {property.CollectionEntityClass.ClassName}Builder( _idProvider );
            
            action.Invoke( builder );

            var entity = builder.{entity.Name}(_entity).Entity;

            _entity.{property.CollectionProperty.Name}.Add(entity);

            return this;
        }}
";
    }

    private static string SelfToManyPropertyInitializeCollectionTemplate(SelfToManyProperty selfToManyProperty)
    {
        return $@"
            _entity.{selfToManyProperty.CollectionProperty.Name} = _entity.{selfToManyProperty.CollectionProperty.Name} ?? new HashSet<{selfToManyProperty.CollectionEntityClass.ClassName}>();";
    }
}