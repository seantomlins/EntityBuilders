using System.Text;
using EntityBuilders.Config;
using EntityBuilders.Models;

namespace EntityBuilders.Templates;

internal static class EntityBuilderTemplate
{
    public static string GenerateSource(Entity entity, EntityBuilderConfig config)
    {
        var propertyMethods = new StringBuilder();
        foreach (var simpleProperty in entity.Properties)
        {
            propertyMethods.Append(SimplePropertyTemplate(entity, simpleProperty));
        }

        foreach (var navigationAndForeignKeyProperty in entity.SelfToOneProperties)
        {
            propertyMethods.Append(SelfToOnePropertyTemplate(entity, navigationAndForeignKeyProperty));
        }

        return $@"// <auto-generated />
using {entity.Namespace};

namespace {config.RootNamespace}
{{
    public partial class {entity.Name}Builder
    {{
        private readonly {entity.Name} _entity;

        public {entity.Name} Entity 
        {{ 
            get {{ return _entity; }} 
        }}

        public {entity.Name}Builder(IIdProvider idProvider)
        {{
            _entity = new {entity.Name}();
            this.{entity.IdPropertyName}(idProvider.NewId());
        }}

        #region Property Methods
        {propertyMethods}
        #endregion
    }}
}}
";
    }

    private static string SimplePropertyTemplate(Entity entity, Property property)
    {
        return $@"
        public {entity.Name}Builder {property.Name}({property.PropertyType} value){{
            _entity.{property.Name} = value;
            return this;
        }}
";
    }

    private static string SelfToOnePropertyTemplate(Entity entity, NavigationAndForeignKeyProperty property)
    {
        var foreignKey = property.ForeignKeyProperty == null
            ? Environment.NewLine
            : @$"_entity.{property.ForeignKeyProperty.Name} = value?.{property.ForeignKeyProperty.Name} ?? 0;";

        return $@"
        public {entity.Name}Builder {property.NavigationProperty.Name}({property.NavigationProperty.PropertyType} value){{
            _entity.{property.NavigationProperty.Name} = value;
            {foreignKey}
            return this;
        }}
";
    }
}