using System.Collections.Immutable;
using System.Text;
using EntityBuilders.Config;
using EntityBuilders.Models;

namespace EntityBuilders.Templates;

internal static class EntityBuilderTemplate
{
    public static string GenerateSource(Entity entity, EntityBuilderConfig config)
    {
        var foreignKeyProperties = entity.Properties
            .Where(x => !x.Name.Equals("Id")
                        && x.Name.EndsWith("Id")
                        && entity.Properties.Any(y =>
                            !y.Name.Equals(x.Name)
                            && y.Name.StartsWith(x.Name.Substring(0, x.Name.Length - 2))))
            .ToImmutableList();

        var navigationProperties = new List<NavigationAndForeignKeyProperty>();

        foreach (var foreignKeyProperty in foreignKeyProperties)
        {
            navigationProperties.Add(new NavigationAndForeignKeyProperty(foreignKeyProperty,
                entity.Properties.First(x => !x.Name.EndsWith("Id") &&
                                             x.Name.StartsWith(foreignKeyProperty.Name.Substring(0,
                                                 foreignKeyProperty.Name.Length - 2)))));
        }

        var propertyMethods = new StringBuilder();
        foreach (var simpleProperty in entity.Properties.Where(x =>
                     !navigationProperties.Select(y => y.ForeignKeyProperty.Name).Contains(x.Name) &&
                     !navigationProperties.Select(y => y.NavigationProperty.Name).Contains(x.Name)))
        {
            propertyMethods.Append(SimplePropertyTemplate(entity, simpleProperty));
        }

        foreach (var navigationAndForeignKeyProperty in navigationProperties)
        {
            propertyMethods.Append(NavigationAndForeignKeyPropertyTemplate(entity, navigationAndForeignKeyProperty));
        }

        return $@"// <auto-generated />
using {entity.Namespace};

namespace {config.RootNamespace}
{{
    public partial class {entity.Name}Builder
    {{
        private readonly {entity.Name} _entity;

        public {entity.Name} Entity {{ get
            {{
                return _entity;
            }}
        }}

        public {entity.Name}Builder(IIdProvider idProvider)
        {{
            _entity = new {entity.Name}();
            this.{entity.IdPropertyName}(idProvider.NewId());
        }}

        #region Property Methods
        {propertyMethods}
        #endregion
    }}
}}
";
    }

    private static string SimplePropertyTemplate(Entity entity, Property property)
    {
        return $@"
        public {entity.Name}Builder {property.Name}({property.PropertyType} value){{
            _entity.{property.Name} = value;
            return this;
        }}
";
    }

    private static string NavigationAndForeignKeyPropertyTemplate(Entity entity, NavigationAndForeignKeyProperty property)
    {
        return $@"
        public {entity.Name}Builder {property.NavigationProperty.Name}({property.NavigationProperty.PropertyType} value){{
            _entity.{property.NavigationProperty.Name} = value;
            _entity.{property.ForeignKeyProperty.Name} = value?.{property.ForeignKeyProperty.Name} ?? 0;
            return this;
        }}
";
    }
}