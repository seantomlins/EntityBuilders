using System.Collections.Immutable;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using Microsoft.CodeAnalysis.Text;

namespace EntityBuilders;

[Generator]
public class EntityBuilderGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
    }

    public void Execute(GeneratorExecutionContext context)
    {
        var config = new EntityBuilderConfig(context);

        IdProvidersGenerator.AddSource(context, config);

        var entities = GetEntities(context);

        foreach (var entity in entities)
        {
            AddBuilderSourceFor(entity, context, config);
        }
    }

    private static void AddBuilderSourceFor(Entity entity,
        GeneratorExecutionContext context,
        EntityBuilderConfig config)
    {
        var propertyMethods = string.Join(string.Empty, entity.Properties.Select(x => $@"
        public {entity.Name}Builder {x.Identifier}({x.Type} value){{
            _entity.{x.Identifier} = value;
            return this;
        }}
"));
        
        var sourceText = SourceText.From($@"// <auto-generated />
using {entity.Namespace};

namespace {config.RootNamespace}
{{
    public partial class {entity.Name}Builder
    {{
        private readonly {entity.Name} _entity;

        public {entity.Name}Builder(IIdProvider idProvider)
        {{
            _entity = new {entity.Name}();
            this.{entity.IdPropertyName}(idProvider.NewId());
        }}

        public {entity.Name} Build()
        {{
            return _entity;
        }}

        #region Property Methods
        {propertyMethods}
        #endregion
    }}
}}
", Encoding.UTF8);

        context.AddSource($"{entity.Name}.g.cs", sourceText);
    }

    private static IEnumerable<Entity> GetEntities(GeneratorExecutionContext context)
    {
        var entities = new List<Entity>();
        foreach (var syntaxTree in context.Compilation.SyntaxTrees)
        foreach (var classDeclarationSyntax in syntaxTree
                     .GetRoot()
                     .DescendantNodes()
                     .OfType<ClassDeclarationSyntax>()
                     .Where(x => x.AttributeLists.Any())
                     .ToImmutableList())
        foreach (var attribute in classDeclarationSyntax.AttributeLists.SelectMany(x => x.Attributes))
        {
            if (attribute.Name.ToString() == "GenerateEntityBuilder")
            {
                entities.Add(new Entity(classDeclarationSyntax));
            }
        }

        return entities;
    }
}